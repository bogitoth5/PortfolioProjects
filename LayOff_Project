select *
from layoffs;  

-- 1. Remove duplicates
-- 2. Standardize the data
-- 3. Null values or blank values
-- 4. Remove any columns

-- Copy the table into a new one, so the original raw data will not be changed
CREATE TABLE layoffs_staging 
LIKE layoffs;  

select *
from layoffs_staging;  

INSERT layoffs_staging
select *
from layoffs;


-- Removing duplicates by adding a row number. If the row number is 2 or bigger, that shows a duplicate

select *
from layoffs_staging; 

select *,
ROW_NUMBER() OVER (PARTITION BY company, industry, total_laid_off, percentage_laid_off, `date`) as row_no
from layoffs_staging; 

WITH duplicate_cte as
(
select *,
ROW_NUMBER() OVER (PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, funds_raised_millions) as row_no
from layoffs_staging
)
SELECT *
FROM duplicate_cte
WHERE row_no > 1;


select *
from layoffs_staging
where company = 'casper'; 


CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
   `row_no` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select *
from layoffs_staging2;

insert into layoffs_staging2
select *,
ROW_NUMBER() OVER (PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, funds_raised_millions) as row_no
from layoffs_staging;

select *
from layoffs_staging2
where row_no >=2;

-- Standardizing Data

select company, (trim(company))
from layoffs_staging2;

update layoffs_staging2
set company = trim(company);

select *
from layoffs_staging2
where industry like 'crypto%';


update layoffs_staging2
set industry = 'Crypto'
where industry like 'crypto%';

select distinct location
from layoffs_staging2
order by 1;

select *
from layoffs_staging2
where location in ('MalmĂ¶', 'Malmo');

update layoffs_staging2
set location = 'Malmo'
where location = 'MalmĂ¶';


select distinct country
from layoffs_staging2
order by 1;

select *
from layoffs_staging2
where country = 'United States.';

update layoffs_staging2
set country = 'United States'
where country = 'United States.';


-- Changing date to date type (mm/dd/yy)
select `date`,
str_to_date(`date`,'%m/%d/%Y')
from layoffs_staging2;

update layoffs_staging2
set `date` = str_to_date(`date`,'%m/%d/%Y');

alter table layoffs_staging2
modify column `date` date;


-- Working with NULLs and blanks
select *
from layoffs_staging2
where total_laid_off IS NULL
and percentage_laid_off is null;

select *
from layoffs_staging2
where industry is null
or industry = '';

-- Populating data was it can be populated
select *
from layoffs_staging2
where company like 'Bally%';

update layoffs_staging2
set industry = null
where industry = '';

select *
from layoffs_staging2 t1
join layoffs_staging2 t2
	on t1.company=t2.company
where (t1.industry is null or t1.industry= '')
and t2.industry is not null;


update layoffs_staging2 t1
join layoffs_staging2 t2
	on t1.company=t2.company
    set t1.industry = t2.industry
where t1.industry is null
and t2.industry is not null;

-- Removing rows with null data
delete
from layoffs_staging2
where total_laid_off IS NULL
and percentage_laid_off is null;

alter table layoffs_staging2
drop column row_no;
